{"version":3,"sources":["logo.svg","components/CountDownTimer.js","screens/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CountDownTimer","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_startTimer","console","log","interval","setInterval","_updateTimer","_stopTimer","clearInterval","_this$state","state","currentMin","currentSec","initMin","initSec","isPlaying","isStop","setState","objectSpread","_handlePlayButton","playButtonText","_handleStopButton","_this$state2","inherits","createClass","key","value","_this2","_this$state3","concat","react_default","a","createElement","className","Fab","size","aria-label","onClick","React","Component","Main","CountDownTimer_CountDownTimer","App","Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a924e72f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Fab from '@material-ui/core/Fab';\n// export const CountDownTimer = () => {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React DDDdd\n//         </a>\n//       </header>\n//     </div>\n//   )\n// };\n\nexport class CountDownTimer extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      initMin: 1,\n      initSec: 0,\n      currentMin: 1,\n      currentSec: 0,\n      isPlaying: false,\n      isStop: false,\n      playButtonText: 'Start',\n    };\n  }\n\n  componentDidMount() {\n    console.log(`MTFK componentDidMount`)\n    this._startTimer();\n  }\n\n  componentWillUnmount() {\n    console.log(`MTFK componentWillUnmount`)\n    clearInterval(this.interval);\n  }\n\n  _startTimer = () => {\n    console.log(`MTFK _startTimer`)\n    this.interval = setInterval(() => {\n      this._updateTimer();\n    }, 1000);\n  }\n\n  _stopTimer = () => {\n    clearInterval(this.interval);\n    console.log(`MTFK _stopTimer`)\n  }\n\n  _updateTimer = () => {\n    const {\n      currentMin,\n      currentSec,\n      initMin,\n      initSec,\n      isPlaying,\n      isStop } = this.state;\n\n    console.log(`MTFK _updateTimer`)\n    if (currentSec === 0) {\n      if (isPlaying && currentMin > 0) {\n        this.setState(state => ({ ...state, currentMin: currentMin - 1, currentSec: 59 }));\n      } else {\n        /* Stop/Pause */\n        if (isStop === true) {\n          this.setState(state => ({ ...state, isPlaying: false }));\n        } else {\n          this.setState(state => ({ ...state, isPlaying: false, currentMin: initMin, currentSec: initSec }));\n        }\n        this._stopTimer();\n      }\n    } else {\n      this.setState(state => ({ ...state, currentSec: currentSec - 1 }));\n    }\n  }\n\n  _handlePlayButton = () => {\n    const { isPlaying } = this.state;\n\n    if (isPlaying) {\n      this.setState(state => ({\n        ...state,\n        isPlaying: false,\n        playButtonText: 'Start'\n      }), () => this._stopTimer());\n    } else {\n      this.setState(state => ({\n        ...state,\n        isPlaying: true,\n        playButtonText: 'Pause'\n      }), () => this._startTimer());\n    }\n  }\n\n  _handleStopButton = () => {\n    const { initMin, initSec } = this.state;\n    console.log(`MTFK _handleStopButton`)\n    this.setState(state => ({\n      ...state,\n      isPlaying: false,\n      isStop: true,\n      playButtonText: 'Start',\n      currentMin: initMin,\n      currentSec: initSec\n    }), () => this._stopTimer())\n  }\n\n  render() {\n    const {\n      isPlaying,\n      isStop,\n      currentMin,\n      currentSec,\n      initMin,\n      initSec,\n      playButtonText\n    } = this.state;\n    console.log(` render() currentMin:${currentMin}, currentSec:${currentSec}`)\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p className=\"timerText\">\n            {currentMin}:{currentSec}\n          </p>\n          <Fab\n            size=\"large\"\n            aria-label=\"Start\"\n            className=\"button buttonCircle\"\n          >\n            Start\n          </Fab>\n          <button\n            className=\"button buttonCircle\"\n            onClick={() => this._handlePlayButton()}>\n            {playButtonText}\n          </button>\n          <button\n            className=\"button buttonCircle\"\n            onClick={() => this._handleStopButton()}>\n            Stop\n          </button>\n        </header>\n        {/* \n        <body>\n\n        </body> */}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport logo from '../../logo.svg';\n// import { CountDownTimer, LeftSideBar, RightSideBar, Footer } from '../../components';\nimport { CountDownTimer } from '../../components/CountDownTimer';\n\nexport default class Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  componentDidMount() {\n  }\n\n  componentWillUnmount() {\n  }\n\n  render() {\n    return (\n      // <LeftSideBar />\n      <CountDownTimer />\n      // <RightSideBar />\n      // <Footer />\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport Main from './screens/Main/index';\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}